/**
 * Class that represents a datatable. Expects: 
 * - paramColumns: columns from JSON generated by controller to be shown 
 * - paramAjaxSource (default: window.location.href + "/table" 
 * - paramSelector css class datable (default: .datable)
 * 
 * @author David Garc√≠a Prados
 */

function CustomDatatable(paramColumns, paramAjaxSource = window.location.href + "/table", paramSelector='.datable') {
	
		let _self = this;
	
		/*
		 * Table attribute init
		 */
		_self.table = $(paramSelector).DataTable({
			sAjaxSource: paramAjaxSource,
			sAjaxDataProp: "",
			sServerMethod: "POST",
			aoColumns: paramColumns,
			
			// Set language
			language : {
				url : new LocaleInfo().LOCALE_FILE_DATATABLES
			},
			// Dom order: export buttons, filter, processing, table, info and
			// pagination
			dom : 'Bfrtip',

			// Excel and CSV export buttons
			buttons : [ {
				extend : 'excelHtml5',
				// Configuration: Columns with 'no-export-datatables' css class
				// are
				// not included in export
				exportOptions : {
					columns : ':not(.no-export-datatables)'
				}
			}, {
				extend : 'csvHtml5',
				// Configuration: Columns with 'no-export-datatables' css class
				// are
				// not included in export
				exportOptions : {
					columns : ':not(.no-export-datatables)'
				}
			} ],

			// Configuration: Columns with 'no-sort-datatables' css class are
			// not
			// orderable
			columnDefs : [ {
				targets : 'no-sort-datatables',
				orderable : false
			} ]
		});
		
		/*
		 * Reload function (after ajax call, for example) without reset paging
		 */
		_self.reload = function(){
			_self.table.ajax.reload(null, false); // callback: null,
													// resetPaging: false
		}
	}
